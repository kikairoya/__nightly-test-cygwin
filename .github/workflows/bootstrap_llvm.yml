name: Bootstrap LLVM
on:
  schedule:
    - cron: '21 22 * * 0'
  workflow_dispatch:

jobs:

  llvm_bootstrap:
    runs-on: windows-latest
    outputs:
      llvm_version: ${{ steps.build.outputs.llvm_version }}
    steps:
      - run: git config --global core.autocrlf input
      - id: cache-restore
        uses: actions/cache/restore@v4
        with:
          key: cygwin-packages-
          restore-keys: |
            cygwin-packages-
          path: cygwin-packages
      - run: IF EXIST cygwin-packages move /y cygwin-packages D:\
        shell: cmd
      - id: cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          site: >-
            http://mirrors.kernel.org/sourceware/cygwin/
          packages: |
            cygutils-extra
            cmake
            calm
            cygport
            flexdll
            gdb
            git
            make
            ninja
            ocaml
            python3
            libxml2-devel
            zlib-devel
            libzstd-devel
            vim
            python39-sphinx
            python39-pytz
            libpcre2-devel
            libssh2-devel
            libssl-devel

      - name: prepare cache
        run: |
          if (Test-Path `${{ steps.cygwin.outputs.package-cache }}\file`* ) {
            rm -r -fo `${{ steps.cygwin.outputs.package-cache }}\file`*
          }
          move "${{ steps.cygwin.outputs.package-cache }}" .
      - uses: actions/cache/save@v4
        if: ${{ steps.cache-restore.outputs.cache-matched-key != format('cygwin-packages-{0}', hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini')) }}
        with:
          key: cygwin-packages-${{ hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini') }}
          path: cygwin-packages
      - name: post cache
        run: move /Y cygwin-packages "${{ steps.cygwin.outputs.package-cache }}"
        shell: cmd

      - id: build
        name: build
        run: |
          export PATH=/usr/local/bin:/usr/bin:/bin:$PATH
          mkdir -p pkgs/x86_64/release
          git clone -b playground https://cygwin.com/git/cygwin-packages/llvm
          cd llvm
          pip3 install --user myst_parser
          BOOTSTRAP=ON cygport llvm.cygport download all-test
          echo llvm-*.x86_64 | sed -e 's/^llvm-\(.*\)\.x86_64$/llvm_version=\1/' | tee ../pkgs/llvm_version.txt >> "$GITHUB_OUTPUT"
          cp -R llvm-*.x86_64/dist/* ../pkgs/x86_64/release
          cd ../pkgs
          mksetupini --arch x86_64 --inifile=x86_64/setup.ini --releasearea=. --disable-check=missing-required-package,missing-depended-package,missing-build-depended-package,missing-curr
          bzip2 <x86_64/setup.ini >x86_64/setup.bz2
          xz -6e <x86_64/setup.ini >x86_64/setup.xz
        shell: d:\cygwin\bin\bash.exe -leo pipefail -o igncr '{0}'

      - uses: actions/upload-artifact@v4
        with:
          name: packages
          overwrite: true
          path: |
            ${{steps.cygwin.outputs.root}}/home/runneradmin/pkgs/

      - run: DEL /F ${{ steps.cygwin.outputs.root }}\bin\git.exe
        if: always()
        shell: cmd

  clang_bootstrap:
    runs-on: windows-latest
    needs: llvm_bootstrap
    outputs:
      clang_version: ${{ steps.build.outputs.clang_version }}
    steps:
      - run: git config --global core.autocrlf input
      - uses: actions/download-artifact@v5
        with:
          name: packages
          path: pkgs
      - id: cache-restore
        uses: actions/cache/restore@v4
        with:
          key: cygwin-packages-
          restore-keys: |
            cygwin-packages-
          path: cygwin-packages
      - run: IF EXIST cygwin-packages move /y cygwin-packages D:\
        shell: cmd
      - id: cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          site: >-
            http://mirrors.kernel.org/sourceware/cygwin/
            file://${{ github.workspace }}/pkgs
          check-sig: false
          packages: |
            cygutils-extra
            cmake
            calm
            cygport
            flexdll
            gdb
            git
            make
            ninja
            ocaml
            python3
            libxml2-devel
            zlib-devel
            libzstd-devel
            vim
            python39-sphinx
            python39-pytz
            libpcre2-devel
            libssh2-devel
            libssl-devel
            libllvm20.1=${{needs.llvm_bootstrap.outputs.llvm_version}}
            libllvm-devel=${{needs.llvm_bootstrap.outputs.llvm_version}}
            llvm=${{needs.llvm_bootstrap.outputs.llvm_version}}

      - name: prepare cache
        run: |
          if (Test-Path `${{ steps.cygwin.outputs.package-cache }}\file`* ) {
            rm -r -fo `${{ steps.cygwin.outputs.package-cache }}\file`*
          }
          move "${{ steps.cygwin.outputs.package-cache }}" .
      - uses: actions/cache/save@v4
        if: ${{ steps.cache-restore.outputs.cache-matched-key != format('cygwin-packages-{0}', hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini')) }}
        with:
          key: cygwin-packages-${{ hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini') }}
          path: cygwin-packages
      - name: post cache
        run: move /Y cygwin-packages "${{ steps.cygwin.outputs.package-cache }}"
        shell: cmd

      - id: build
        name: build
        run: |
          export PATH=/usr/local/bin:/usr/bin:/bin:$PATH
          mv "$(cygpath -u '${{github.workspace}}')/pkgs" .
          mkdir -p pkgs/x86_64/release
          git clone -b playground https://cygwin.com/git/cygwin-packages/clang
          cd clang
          pip3 install --user myst_parser
          BOOTSTRAP=ON cygport clang.cygport download all-test
          echo clang-*.x86_64 | sed -e 's/^clang-\(.*\)\.x86_64$/clang_version=\1/' | tee -a ../pkgs/llvm_version.txt >> "$GITHUB_OUTPUT"
          cp -R clang-*.x86_64/dist/* ../pkgs/x86_64/release
          cd ../pkgs
          mksetupini --arch x86_64 --inifile=x86_64/setup.ini --releasearea=. --disable-check=missing-required-package,missing-depended-package,missing-build-depended-package,missing-curr
          bzip2 <x86_64/setup.ini >x86_64/setup.bz2
          xz -6e <x86_64/setup.ini >x86_64/setup.xz
        shell: d:\cygwin\bin\bash.exe -leo pipefail -o igncr '{0}'

      - uses: actions/upload-artifact@v4
        with:
          name: packages
          overwrite: true
          path: |
            ${{steps.cygwin.outputs.root}}/home/runneradmin/pkgs/

      - run: DEL /F ${{ steps.cygwin.outputs.root }}\bin\git.exe
        if: always()
        shell: cmd

  llvm:
    runs-on: windows-latest
    needs: [llvm_bootstrap, clang_bootstrap]
    steps:
      - run: git config --global core.autocrlf input
      - uses: actions/download-artifact@v5
        with:
          name: packages
          path: pkgs
      - id: cache-restore
        uses: actions/cache/restore@v4
        with:
          key: cygwin-packages-
          restore-keys: |
            cygwin-packages-
          path: cygwin-packages
      - run: IF EXIST cygwin-packages move /y cygwin-packages D:\
        shell: cmd
      - id: cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          site: >-
            http://mirrors.kernel.org/sourceware/cygwin/
            file://${{ github.workspace }}/pkgs
          check-sig: false
          packages: |
            cygutils-extra
            cmake
            calm
            cygport
            flexdll
            gdb
            git
            make
            ninja
            ocaml
            python3
            libxml2-devel
            zlib-devel
            libzstd-devel
            vim
            python39-sphinx
            python39-pytz
            libpcre2-devel
            libssh2-devel
            libssl-devel
            libllvm20.1=${{needs.llvm_bootstrap.outputs.llvm_version}}
            libllvm-devel=${{needs.llvm_bootstrap.outputs.llvm_version}}
            llvm=${{needs.llvm_bootstrap.outputs.llvm_version}}
            libclang20.1=${{needs.clang_bootstrap.outputs.clang_version}}
            clang=${{needs.clang_bootstrap.outputs.clang_version}}

      - name: prepare cache
        run: |
          if (Test-Path `${{ steps.cygwin.outputs.package-cache }}\file`* ) {
            rm -r -fo `${{ steps.cygwin.outputs.package-cache }}\file`*
          }
          move "${{ steps.cygwin.outputs.package-cache }}" .
      - uses: actions/cache/save@v4
        if: ${{ steps.cache-restore.outputs.cache-matched-key != format('cygwin-packages-{0}', hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini')) }}
        with:
          key: cygwin-packages-${{ hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini') }}
          path: cygwin-packages
      - name: post cache
        run: move /Y cygwin-packages "${{ steps.cygwin.outputs.package-cache }}"
        shell: cmd

      - name: build
        run: |
          export PATH=/usr/local/bin:/usr/bin:/bin:$PATH
          mv "$(cygpath -u '${{github.workspace}}')/pkgs" .
          mkdir -p pkgs/x86_64/release
          git clone -b playground https://cygwin.com/git/cygwin-packages/llvm
          cd llvm
          pip3 install --user myst_parser
          cygport llvm.cygport download all-test
          cp -Rf llvm-*.x86_64/dist/* ../pkgs/x86_64/release
          cd ../pkgs
          mksetupini --arch x86_64 --inifile=x86_64/setup.ini --releasearea=. --disable-check=missing-required-package,missing-depended-package,missing-build-depended-package,missing-curr
          bzip2 <x86_64/setup.ini >x86_64/setup.bz2
          xz -6e <x86_64/setup.ini >x86_64/setup.xz
        shell: d:\cygwin\bin\bash.exe -leo pipefail -o igncr '{0}'

      - uses: actions/upload-artifact@v4
        with:
          name: packages
          overwrite: true
          path: |
            ${{steps.cygwin.outputs.root}}/home/runneradmin/pkgs/

      - run: DEL /F ${{ steps.cygwin.outputs.root }}\bin\git.exe
        if: always()
        shell: cmd

  clang:
    runs-on: windows-latest
    needs: [llvm_bootstrap, clang_bootstrap, llvm]
    steps:
      - run: git config --global core.autocrlf input
      - uses: actions/download-artifact@v5
        with:
          name: packages
          path: pkgs
      - id: cache-restore
        uses: actions/cache/restore@v4
        with:
          key: cygwin-packages-
          restore-keys: |
            cygwin-packages-
          path: cygwin-packages
      - run: IF EXIST cygwin-packages move /y cygwin-packages D:\
        shell: cmd
      - id: cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          site: >-
            http://mirrors.kernel.org/sourceware/cygwin/
            file://${{ github.workspace }}/pkgs
          check-sig: false
          packages: |
            cygutils-extra
            cmake
            calm
            cygport
            flexdll
            gdb
            git
            make
            ninja
            ocaml
            python3
            libxml2-devel
            zlib-devel
            libzstd-devel
            vim
            python39-sphinx
            python39-pytz
            libpcre2-devel
            libssh2-devel
            libssl-devel
            libllvm20.1=${{needs.llvm_bootstrap.outputs.llvm_version}}
            libllvm-devel=${{needs.llvm_bootstrap.outputs.llvm_version}}
            llvm=${{needs.llvm_bootstrap.outputs.llvm_version}}
            libclang20.1=${{needs.clang_bootstrap.outputs.clang_version}}
            clang=${{needs.clang_bootstrap.outputs.clang_version}}
            libpolly-devel=${{needs.llvm_bootstrap.outputs.llvm_version}}

      - name: prepare cache
        run: |
          if (Test-Path `${{ steps.cygwin.outputs.package-cache }}\file`* ) {
            rm -r -fo `${{ steps.cygwin.outputs.package-cache }}\file`*
          }
          move "${{ steps.cygwin.outputs.package-cache }}" .
      - uses: actions/cache/save@v4
        if: ${{ steps.cache-restore.outputs.cache-matched-key != format('cygwin-packages-{0}', hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini')) }}
        with:
          key: cygwin-packages-${{ hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini') }}
          path: cygwin-packages
      - name: post cache
        run: move /Y cygwin-packages "${{ steps.cygwin.outputs.package-cache }}"
        shell: cmd

      - name: build
        run: |
          export PATH=/usr/local/bin:/usr/bin:/bin:$PATH
          mv "$(cygpath -u '${{github.workspace}}')/pkgs" .
          mkdir -p pkgs/x86_64/release
          git clone -b playground https://cygwin.com/git/cygwin-packages/clang
          cd clang
          pip3 install --user myst_parser
          cygport clang.cygport download all-test
          cp -Rf clang-*.x86_64/dist/* ../pkgs/x86_64/release
          cd ../pkgs
          mksetupini --arch x86_64 --inifile=x86_64/setup.ini --releasearea=. --disable-check=missing-required-package,missing-depended-package,missing-build-depended-package,missing-curr
          bzip2 <x86_64/setup.ini >x86_64/setup.bz2
          xz -6e <x86_64/setup.ini >x86_64/setup.xz
        shell: d:\cygwin\bin\bash.exe -leo pipefail -o igncr '{0}'

      - uses: actions/upload-artifact@v4
        with:
          name: packages
          overwrite: true
          path: |
            ${{steps.cygwin.outputs.root}}/home/runneradmin/pkgs/

      - run: DEL /F ${{ steps.cygwin.outputs.root }}\bin\git.exe
        if: always()
        shell: cmd
