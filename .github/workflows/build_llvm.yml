name: Build LLVM
on:
  workflow_call:
    inputs:
      upstream-branch:
        description: 'Upstream branch to build'
        type: string
        required: true
        default: 'main'
      patch-series:
        description: 'Patch series to apply'
        type: string
        required: true
        default: 'main'
      config:
        description: 'Build config script'
        type: string
        required: true
  workflow_dispatch:
    inputs:
      upstream-branch:
        description: 'Upstream branch to build'
        type: string
        required: true
        default: 'main'
      patch-series:
        description: 'Patch series to apply'
        type: string
        required: true
        default: 'main'
      config:
        description: 'Build config script'
        type: string
        required: true
        default: 'clang-dylib'

jobs:
  build:
    runs-on: windows-latest
    name: Build LLVM ${{ inputs.upstream-branch }} ${{ inputs.config }}
    concurrency:
      group: build-self-cygwin

    outputs:
      build-name: ${{ steps.build-llvm.outputs.build-name }}
      upstream-commit: ${{ steps.prepare-tree.outputs.commit }}
      patch-commit: ${{ steps.checkout-patch.outputs.commit }}

    steps:
      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-patch
        uses: actions/checkout@v5
        with:
          path: patches

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./patches/.github/actions/prepare-cygwin-root

      - name: prepare llvm tree
        id: prepare-tree
        uses: ./patches/.github/actions/patch-llvm
        with:
          remote-ref: ${{ inputs.upstream-branch }}
          patch-series: ${{ inputs.patch-series }}

      - name: build llvm
        id: build-llvm
        uses: ./patches/.github/actions/build-llvm
        env:
          LIT_OPTS: '--show-suites'
        with:
          config-name: ${{ inputs.config }}
          parallel-compile-jobs: 3
          cygwin-root: ${{ steps.prepare-cygwin.outputs.root }}
          build-target: 'check'

  check:
    runs-on: windows-latest
    name: Check LLVM ${{ inputs.upstream-branch }} ${{ inputs.config }}
    needs: build
    concurrency:
      group: test-self-cygwin

    steps:
      - run: git config --global core.autocrlf input

      - name: prepare patches
        id: checkout-patch
        uses: actions/checkout@v5
        with:
          path: patches
          ref: ${{ needs.build.outputs.patch-commit }}

      - name: prepare Cygwin
        id: prepare-cygwin
        uses: ./patches/.github/actions/prepare-cygwin-root

      - name: prepare llvm tree
        id: prepare-tree
        uses: ./patches/.github/actions/patch-llvm
        with:
          patch-series: ${{ inputs.patch-series }}
          remote-ref: ${{ needs.build.outputs.upstream-commit }}

      - uses: actions/download-artifact@v5
        with:
          name: build-artifact

      - name: check llvm
        timeout-minutes: 330
        env:
          BUILD_NAME: ${{ needs.build.outputs.build-name }}
        run: |
          tar xf llvm-cygwin-$BUILD_NAME.tar
          rm llvm-cygwin-$BUILD_NAME.tar
          export LIT_OPTS="-q --no-execute --ignore-fail --xunit-xml-output=$PWD/dryrun-$BUILD_NAME.xml"
          bash build-$BUILD_NAME/CMakeFiles/check-all-*.sh
          if [ -f patches/xfail-${{ inputs.config }}.txt ]; then
            export LIT_XFAIL="$(sed '2,$s/^/;/' < patches/xfail-${{ inputs.config }}.txt | tr -d '\n')"
          fi
          if [ -f patches/filter-out-${{ inputs.config }}.txt ]; then
            export LIT_FILTER_OUT="($(sed '2,$s/^/)|(/' < patches/filter-out-${{ inputs.config }}.txt | tr -d '\n'))"
          fi
          if [ -f patches/filter-${{ inputs.config }}.txt ]; then
            export LIT_FILTER="($(sed '2,$s/^/)|(/' < patches/filter-${{ inputs.config }}.txt | tr -d '\n'))"
          fi
          export LIT_OPTS="-sv -j2 --xunit-xml-output=$PWD/result-$BUILD_NAME.xml"
          env | grep ^LIT > env-$BUILD_NAME.txt || true
          bash build-$BUILD_NAME/CMakeFiles/check-all-*.sh | tee testlog-$BUILD_NAME.txt
        shell: cygwin-bash '{0}'

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: test-log
          overwrite: true
          path: |
            ${{ github.workspace }}/*-${{ needs.build.outputs.build-name }}.xml
            ${{ github.workspace }}/*-${{ needs.build.outputs.build-name }}.txt
