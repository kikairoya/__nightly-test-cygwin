name: Build LLVM
on:
  workflow_dispatch:
    inputs:
      upstream_ref:
        description: "Upstream branch to build"
        type: string
        required: true
        default: "llvmorg-21.1.1"
      config:
        description: "Build config script"
        type: string
        required: true
        default: "clang-static"

jobs:
  do_build:
    runs-on: windows-latest
    strategy:
      fail-fast: false

    steps:
      - run: git config --global core.autocrlf input

      - name: prepare patches
        uses: actions/checkout@v5
        with:
          path: patches
      - name: prepare llvm tree
        uses: actions/checkout@v5
        with:
          repository: llvm/llvm-project
          fetch-tags: true
          ref: ${{ inputs.upstream_ref }}
          path: llvm-project
      - name: get rev
        run: |
          while read; do
            case $REPLY in *set*LLVM_VERSION_MAJOR*)
              [[ $REPLY =~ [0-9][1-9]* ]] && MAJOR_VER=$BASH_REMATCH;
              break ;;
            esac;
          done < llvm-project/cmake/Modules/LLVMVersion.cmake
          git -C llvm-project config user.name github-actions
          git -C llvm-project config user.email github@github.com
          git -C llvm-project config status.showuntrackedfiles no
          UPSTREAM_REV=$(git -C llvm-project log -n1 --format=format:%h)
          PATCH_REV=$(git -C patches log -n1 --format=format:%h)
          LLVM_VERSION=$MAJOR_VER-$UPSTREAM_REV+mod-$PATCH_REV
          echo "LLVM_VERSION=$LLVM_VERSION" >> "$GITHUB_ENV"
          echo "UPSTREAM_REV=$UPSTREAM_REV" >> "$GITHUB_ENV"
          echo output version tag is set to $LLVM_VERSION
          if [ -d "$PWD/patches/patches/${{ inputs.upstream_ref }}" ]; then
            git -C llvm-project am --empty=drop $PWD/patches/patches/${{ inputs.upstream_ref }}/*
            mkdir -p patches/llvm-cygwin-${{ inputs.config }}-$LLVM_VERSION/diffs
            git -C llvm-project format-patch -o $PWD/patches/llvm-cygwin-${{ inputs.config }}-$LLVM_VERSION/diffs $UPSTREAM_REV..HEAD
          fi
        shell: bash

      - id: cache-restore
        uses: actions/cache/restore@v4
        with:
          key: cygwin-packages-
          restore-keys: |
            cygwin-packages-
          path: cygwin-packages
      - run: IF EXIST cygwin-packages move /y cygwin-packages D:\
        shell: cmd
      - id: cygwin
        uses: cygwin/cygwin-install-action@master
        with:
          site: >-
            http://mirrors.kernel.org/sourceware/cygwin/
          packages: |
            binutils
            clang
            lld
            cmake
            git
            make
            ninja
            python3
            libxml2-devel
            zlib-devel
            libzstd-devel

      - name: prepare cache
        run: |
          if (Test-Path `${{ steps.cygwin.outputs.package-cache }}\file`* ) {
            rm -r -fo `${{ steps.cygwin.outputs.package-cache }}\file`*
          }
          move "${{ steps.cygwin.outputs.package-cache }}" .
      - uses: actions/cache/save@v4
        if: ${{ steps.cache-restore.outputs.cache-matched-key != format('cygwin-packages-{0}', hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini')) }}
        with:
          key: cygwin-packages-${{ hashFiles('cygwin-packages/**', '!cygwin-packages/**/setup.ini') }}
          path: cygwin-packages
      - name: post cache
        run: move /Y cygwin-packages "${{ steps.cygwin.outputs.package-cache }}"
        shell: cmd

      - id: build
        name: build
        run: |
          export PATH=/usr/local/bin:/usr/bin:/bin:$PATH
          export GITHUB_WORKSPACE="$(cygpath -u '${{github.workspace}}')"
          cd "$GITHUB_WORKSPACE"

          cd patches
          cfgname=${{ inputs.config }}
          cfgfile=config-$cfgname.txt
          [ -f "$cfgfile" ]

          {
            echo LLVM_PARALLEL_COMPILE_JOBS=3
            echo LLVM_PARALLEL_LINK_JOBS=2
            echo LLVM_FORCE_VC_REVISION=$UPSTREAM_ENV
            echo LLVM_FORCE_VC_REPOSITORY=llvm-cygwin
          } >> $cfgfile

          ./runcmake.sh $cfgfile -v | tee ../buildlog-$cfgname-$LLVM_VERSION.txt
          ./runcmake.sh $cfgfile -v -i --prefix $PWD/llvm-cygwin-$cfgname-$LLVM_VERSION

          tar caf ../llvm-cygwin-$cfgname-$LLVM_VERSION.tar llvm-cygwin-$cfgname-$LLVM_VERSION

          LIT_OPTS="-sv --xunit-xml-output=$PWD/../result-$cfgname-$LLVM_VERSION.xml" ./runcmake.sh $cfgfile -v -- check | tee ../testlog-$cfgname-$LLVM_VERSION.txt
        shell: d:\cygwin\bin\bash.exe -leo pipefail -o igncr '{0}'

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: artifact
          overwrite: true
          path: ${{ github.workspace }}/*-${{ env.LLVM_VERSION }}.tar
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: buildlog
          overwrite: true
          path: |
            ${{ github.workspace }}/*-${{ env.LLVM_VERSION }}.txt
            ${{ github.workspace }}/*-${{ env.LLVM_VERSION }}.xml

      - run: DEL /F ${{ steps.cygwin.outputs.root }}\bin\git.exe
        if: always()
        shell: cmd
